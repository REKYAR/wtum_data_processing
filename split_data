import shutil
import matplotlib.pyplot as plt
import os
import numpy as np
import pandas as pd
import sys
sys.executable


# res = {}
# for filename in os.listdir('./data_merged'):
#     f = os.path.join('./data_merged', filename)
#     # checking if it is a file
#     if os.path.isfile(f):
#         age = int(filename.split('_')[0])

#         if age in res:
#             res[age] += 1
#         else:
#             res[age] = 1

# plt.bar(res.keys(), res.values())
# plt.show()


# def equisum_partition(arr, age_labels, p):
#     ac = arr.cumsum()

#     # sum of the entire array
#     partsum = ac[-1]//p

#     # generates the cumulative sums of each part
#     cumpartsums = np.array(range(1, p))*partsum

#     # finds the indices where the cumulative sums are sandwiched
#     inds = np.searchsorted(ac, cumpartsums)

#     # split into approximately equal-sum arrays
#     parts = np.split(arr, inds)
#     # print("indecies")
#     # print(inds)
#     range_labels = []
#     range_labels.append(f"1-{age_labels[inds[0]]-1}")
#     for i in range(0, len(inds) - 1):
#         range_labels.append(f"{age_labels[inds[i]]}-{age_labels[inds[i+1]]-1}")
#     range_labels.append(f"{age_labels[inds[-1]]}-{age_labels[-1]}")
#     # print(parts)
#     print("generated ranges")
#     print(range_labels)
#     return (parts, range_labels)


# res_keys_sorted = []
# for age_idx in sorted(res):
#     res_keys_sorted.append(res[age_idx])

# balanced_ranges = equisum_partition(np.array(res_keys_sorted), sorted(res), 10)
# # 10,11 (slabe), 12, 13(slabe), 14,


# # print(balanced_ranges[0])
# # print(balanced_ranges[1])
# arrsum = []
# for arr in balanced_ranges[0]:
#     # print(arr)
#     arrsum.append(np.sum(arr))
# print(arrsum)
# plt.bar(balanced_ranges[1], arrsum)


# # generate adequate dataset
# def build_dataset(keyranges):
#     os.mkdir("./generated_dataset")
#     age_dict = {}
#     for krng in keyranges:
#         os.mkdir(f"./generated_dataset/{krng}")
#         lower = krng.split('-')[0]
#         upper = krng.split('-')[1]
#         for age in range(int(lower), int(upper)+1):
#             age_dict[age] = krng
#         print((lower, upper))
#     # print(age_dict)
#         # copy photos
#     for filename in os.listdir('./data_merged'):
#         f = os.path.join('./data_merged', filename)
#         # checking if it is a file
#         if os.path.isfile(f):
#             age = int(filename.split('_')[0])
#             # copy to generated_dataset/age_dict[age]
#             shutil.copyfile(
#                 src=f, dst=f"./generated_dataset/{age_dict[age]}/{filename}")


# build_dataset(balanced_ranges[1])


# split learn/validation

def split_dataset(percent_of_files, split):
    os.mkdir("./generated_dataset_learn_smallset100prim")
    os.mkdir("./generated_dataset_validation_smallset100prim")
    for dirname in os.listdir('./generated_dataset'):
        # os.mkdir(f"./generated_dataset_learn/{dirname}")
        # os.mkdir(f"./generated_dataset_validation/{dirname}")
        cnt = 0
        temp = 1
        cnt_all = (percent_of_files/100) * \
            len(os.listdir(f'./generated_dataset/{dirname}'))
        # cnt_learn = cnt_all * split/100

        for filename in os.listdir(f'./generated_dataset/{dirname}'):
            if cnt > cnt_all:
                break
            elif temp < 5:  # 20%
                shutil.copyfile(
                    src=f"./generated_dataset/{dirname}/{filename}", dst=f"./generated_dataset_learn_smallset100prim/{filename}")
                temp += 1
            else:
                shutil.copyfile(src=f"./generated_dataset/{dirname}/{filename}",
                                dst=f"./generated_dataset_validation_smallset100prim/{filename}")
                temp = 1

            cnt += 1


split_dataset(100, 80)
